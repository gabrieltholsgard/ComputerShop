DROP VIEW NEEDED;
DROP VIEW AVAILABILITY;

DROP TRIGGER calc_price_insert;
DROP TRIGGER calc_price_update;
DROP TRIGGER calc_price_delete;

DROP TABLE ORDER_ITEMS CASCADE;
DROP TABLE ORDERS CASCADE;
DROP TABLE COMPOSITION CASCADE;
DROP TABLE BOOKS CASCADE;
DROP TABLE AUTHORS CASCADE;

drop table USER_ROLES cascade;
drop table USERS cascade;

CREATE TABLE AUTHORS(
	AUTHOR_ID INT NOT NULL AUTO_INCREMENT, 
	NAME VARCHAR(50),
	SURNAME VARCHAR(50),
	QTY INTEGER,
	C_PRICE INTEGER,
	PRIMARY KEY(AUTHOR_ID)
);



CREATE TABLE BOOKS(
	BOOK_ID INT  NOT NULL AUTO_INCREMENT, 
	AUTHOR_ID INT,
	TITLE VARCHAR(200), 
	DESCRIPTION BLOB, 
	PRICE NUMERIC(5,2), 
	PAGES INT,
	PROFIT INTEGER,
	VISIBLE BOOLEAN,
	PRIMARY KEY(BOOK_ID)
);



CREATE TABLE COMPOSITION (
	EL_ID INTEGER,
	COM_ID INTEGER,
	QTY INTEGER,
	PRIMARY KEY(EL_ID, COM_ID),
	FOREIGN KEY (EL_ID) REFERENCES BOOKS(BOOK_ID),
	FOREIGN KEY (COM_ID) REFERENCES AUTHORS(AUTHOR_ID)
);



CREATE TABLE ORDERS(
	ORDER_ID INT NOT NULL AUTO_INCREMENT,
	BUYER_NAME VARCHAR(100),
	SHIPPING_ADRESS VARCHAR(100),
	SHIPPING_ZIPCODE VARCHAR(10),
	SHIPPING_CITY VARCHAR(30),
	PRIMARY KEY(ORDER_ID)
);



CREATE TABLE ORDER_ITEMS(
	ORDER_ITEM_ID INT NOT NULL AUTO_INCREMENT,
	ORDER_ID INT,
	BOOK_ID INT,
	QUANTITY INT,
	PRIMARY KEY(ORDER_ITEM_ID),
	FOREIGN KEY(ORDER_ID) REFERENCES ORDERS(ORDER_ID),
	FOREIGN KEY(BOOK_ID) REFERENCES BOOKS(BOOK_ID)
);



create table USERS(
       USER_NAME varchar(15) not null primary key,
       USER_PASS varchar(15) not null,
       NAME varchar(100) not null,
       STREET_ADDRESS varchar(100)not null,
       ZIP_CODE varchar(10) not null,
       CITY varchar(30) not null,
       COUNTRY varchar(30) not null
);

create table USER_ROLES(
	USER_NAME varchar(15) not null,
	ROLE_NAME varchar(15) not null,
	primary key (USER_NAME, ROLE_NAME)
);


INSERT INTO AUTHORS(NAME, SURNAME) VALUES('GREG',    'BARISH');
INSERT INTO AUTHORS(NAME, SURNAME) VALUES('TIMOTHY', 'BUDD');
INSERT INTO AUTHORS(NAME, SURNAME) VALUES('MARK',    'WUTKA');
INSERT INTO AUTHORS(NAME, SURNAME) VALUES('H.M',     'DIETEL');

INSERT INTO BOOKS(AUTHOR_ID, TITLE, DESCRIPTION, PRICE, PAGES) VALUES(
	1,
	'BUILDNING SCALABLE AND HIGH-PERFORMANCE JAVA WEB APPLICATIONS USING J2EE TECHNOLOGY',
	'A BOOK ABOUT BUILDNING SCALABLE AND HIGH-PERFORMANCE JAVA WEB APPLICATIONS USING J2EE TECHNOLOGY. THE BOOKS DESCRIBES HOW TO USE THE DIFFERENT PARTS OF J2EE TO BUILD A WEB APPLICATION',
	600, 392);
INSERT INTO BOOKS(AUTHOR_ID, TITLE, DESCRIPTION, PRICE, PAGES) VALUES(
	2,
	'CLASSIC DATA STRUCTURES IN C++',
	'BUDD EXPLAINS SEVERAL DATA STRUCTURES THAT ARE COMMIN IN C++',
	550, 537);
INSERT INTO BOOKS(AUTHOR_ID, TITLE, DESCRIPTION, PRICE, PAGES) VALUES(
	2,
	'CLASSIC DATA STRUCTURES IN JAVA',
	'BUDD EXPLAINS SEVERAL DATA STRUCTURES THAT ARE COMMIN IN JAVA',
	650, 437);
INSERT INTO BOOKS(AUTHOR_ID, TITLE, DESCRIPTION, PRICE, PAGES) VALUES(
	3,
	'SPECIAL EDITION USING JAVA SERVER PAGES',
	'A QUITE EXTENSIVE BOOK ABOUT WEB DEVELOPMENT USING JAVA SERVER PAGES AND JAVA SERVLETS',
	400, 351);
INSERT INTO BOOKS(AUTHOR_ID, TITLE, DESCRIPTION, PRICE, PAGES) VALUES(
	4,
	'C: HOW TO PROGRAM',
	'AN INTRODUCTION TO C-PROGRAMMING.',
	430, 800);

insert into USERS(USER_NAME, USER_PASS, NAME, STREET_ADDRESS, ZIP_CODE, CITY, COUNTRY) 
     VALUES('tomcat','tacmot','Tom Cat','Apache Road', '34 567', 'Petaluma', 'USA');
insert into USERS(USER_NAME, USER_PASS, NAME, STREET_ADDRESS, ZIP_CODE, CITY, COUNTRY) 
     VALUES('gyro','glurk','Gyro Gearloose','Duck Road', '78 901', 'Ducksbury', 'USA');
insert into USERS(USER_NAME, USER_PASS, NAME, STREET_ADDRESS, ZIP_CODE, CITY, COUNTRY) 
     VALUES('admin', 'glurk','System user', 'Polacksbacken', '752 37', 'Uppsala', 'Sweden');

insert into USER_ROLES(USER_NAME, ROLE_NAME) VALUES('tomcat','tomcat');
insert into USER_ROLES(USER_NAME, ROLE_NAME) VALUES('gyro',  'tomcat');
insert into USER_ROLES(USER_NAME, ROLE_NAME) VALUES('admin', 'manager');
insert into USER_ROLES(USER_NAME, ROLE_NAME) VALUES('admin', 'admin');
insert into USER_ROLES(USER_NAME, ROLE_NAME) VALUES('admin', 'tomcat');
insert into USER_ROLES(USER_NAME, ROLE_NAME) VALUES('admin', 'manager-script');
insert into USER_ROLES(USER_NAME, ROLE_NAME) VALUES('admin', 'manager-gui');
insert into USER_ROLES(USER_NAME, ROLE_NAME) VALUES('admin', 'admin-gui');

INSERT INTO COMPOSITION VALUES (1,1,2);
INSERT INTO COMPOSITION VALUES (1,2,3);
INSERT INTO COMPOSITION VALUES (2,3,3);
INSERT INTO COMPOSITION VALUES (3,1,3);
INSERT INTO COMPOSITION VALUES (3,2,2);
INSERT INTO COMPOSITION VALUES (3,3,3);
INSERT INTO COMPOSITION VALUES (4,3,3);
INSERT INTO COMPOSITION VALUES (4,2,1);
INSERT INTO COMPOSITION VALUES (4,1,10);
INSERT INTO COMPOSITION VALUES (5,1,10);

UPDATE BOOKS SET PROFIT = 10 WHERE BOOK_ID > 0;
UPDATE BOOKS SET VISIBLE = TRUE WHERE BOOK_ID > 0;
UPDATE AUTHORS SET QTY = 100 WHERE AUTHOR_ID > 0;
UPDATE AUTHORS SET C_PRICE = 150 WHERE AUTHOR_ID > 0;

CREATE VIEW NEEDED AS SELECT BOOKS.BOOK_ID,BOOKS.TITLE, COMPOSITION.COM_ID, AUTHORS.NAME,
							 COMPOSITION.QTY, AUTHORS.QTY AS IN_STOCK, AUTHORS.C_PRICE,
							 BOOKS.PROFIT
	FROM BOOKS LEFT JOIN (COMPOSITION CROSS JOIN AUTHORS)
		ON (AUTHORS.AUTHOR_ID=COMPOSITION.COM_ID AND COMPOSITION.EL_ID = BOOKS.BOOK_ID);

CREATE VIEW AVAILABILITY AS SELECT BOOK_ID, TITLE, MIN(FLOOR(IN_STOCK / QTY)) AS AVAILABILITY,
								   SUM((QTY*C_PRICE)+PROFIT) AS FINAL_PRICE
	FROM NEEDED GROUP BY BOOK_ID;



CREATE TRIGGER calc_price_insert AFTER INSERT ON composition FOR EACH ROW
	UPDATE books, (SELECT c.el_id, SUM(c_price * c.qty) as cost
				FROM composition AS c, authors WHERE c.com_id = author_id and c.el_id = NEW.el_id) AS temp
	SET books.price = (temp.cost + books.profit) WHERE books.book_id = el_id;


CREATE TRIGGER calc_price_update AFTER UPDATE ON composition FOR EACH ROW
	UPDATE books, (SELECT c.el_id, SUM(c_price * c.qty) as cost
				FROM composition AS c, authors WHERE c.com_id = author_id and c.el_id = NEW.el_id) AS temp
	SET books.price = (temp.cost + books.profit) WHERE books.book_id = el_id;


CREATE TRIGGER calc_price_delete AFTER DELETE ON composition FOR EACH ROW
	UPDATE books, (SELECT c.el_id, SUM(c_price * c.qty) as cost
				FROM composition AS c, authors WHERE c.com_id = author_id and c.el_id = OLD.el_id) AS temp
	SET books.price = (temp.cost + books.profit) WHERE books.book_id = el_id;